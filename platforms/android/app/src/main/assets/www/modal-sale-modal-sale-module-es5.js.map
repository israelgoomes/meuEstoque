{"version":3,"sources":["webpack:///src/app/modal-sale/modal-sale-routing.module.ts","webpack:///src/app/modal-sale/modal-sale.module.ts","webpack:///src/app/services/alert-service/alert-service.service.ts","webpack:///src/app/services/product-service/product.service.ts"],"names":["routes","path","component","ModalSalePageRoutingModule","imports","forChild","exports","ModalSalePageModule","declarations","AlertService","alertCtrl","toastCtrl","header","message","create","buttons","text","handler","blah","alert","present","callback","role","cssClass","console","log","duration","position","toast","providedIn","ProductService","http","htt2","updtaeProductData","url","URL2","id","product","get","data","put","idProduct","post","cdProduct"],"mappings":"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","file":"modal-sale-modal-sale-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ModalSalePage } from './modal-sale.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ModalSalePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ModalSalePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ModalSalePageRoutingModule } from './modal-sale-routing.module';\n\nimport { ModalSalePage } from './modal-sale.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ModalSalePageRoutingModule\n  ],\n  declarations: []\n})\nexport class ModalSalePageModule {}\n","import { Injectable } from '@angular/core';\nimport { AlertController, ToastController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertService {\n\n  constructor(public alertCtrl: AlertController,\n              public toastCtrl: ToastController) { }\n\nasync okAlert(header, message){\n  const alert = await this.alertCtrl.create({\n    header,\n    message,\n    buttons: [\n      {\n        text: \"Ok\",\n  //        cssClass: \"secondary\",\n        handler: blah => {\n        }\n      },\n    ]\n  });\n  await alert.present();\n}\n\n\n  async confirm(message, callback: any) {\n    const alert = await this.alertCtrl.create({\n      header: \"Excluir?\",\n      message,\n      buttons: [\n        {\n          text: \"Cancelar\",\n          role: \"cancel\",\n          cssClass: \"secondary\",\n          handler: blah => {\n            console.log(\"Confirm Cancel: blah\");\n          }\n        },\n        {\n          text: \"Ok\",\n          handler: () => {\n            callback();\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  async toast(message: string, duration: number, position) {\n    const toast = await this.toastCtrl.create({\n      message: message,\n      duration: duration,\n      position: position    });\n    toast.present();\n  }\n}\n","import { configHelper } from './../../configurations/configHelper';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpService } from '../http-service/http.service';\nimport { forkJoin } from 'rxjs';\nimport { ProductModel } from '../../models/tbProductModel';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  url: string;\n  constructor(private http: HttpService, private htt2: HttpClient) {\n    this.url = `${configHelper.URL2}/product`;\n  }\n\n  updtaeProductData = new EventEmitter();\n\n  public getProducts(id: number): Observable<any> {\n    const product = this.http.get(`${this.url}/${id}`);\n    // const provider= this.http.get(`${configHelper.URL}/provider/${id}`);\n    return forkJoin([product]);\n    //this.http.get(`${this.url}/${id}`)\n  }\n\n  public deleteProduct(id: number): Observable<ProductModel> {\n    return this.http.delete(`${this.url}`, id);\n  }\n\n  public update(data: any): Observable<ProductModel> {\n    return this.http.put(`${this.url}/${data.idProduct}`, data);\n  }\n\n  public createProduct(data: any): Observable<ProductModel> {\n    return this.http.post(`${this.url}`, data);\n  }\n\n  public updateForSale(id, data): Observable<ProductModel> {\n    return this.http.put(`${this.url}/cancel-sale/${id}`, data);\n  }\n\n  public getScanCode(id, cdProduct): Observable<ProductModel> {\n    cdProduct = {\n      cdProduct: cdProduct,\n    };\n    return this.http.post(`${this.url}/cdProduct/${id}`, cdProduct);\n  }\n}\n"]}